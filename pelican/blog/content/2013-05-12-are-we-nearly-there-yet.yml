---
title: A Dlna Server On a Raspberry Pi.
summary: "Using a raspberry pi to create a WiFi based dlna multimedia server, which can be used in a car, or as a standalone box. "
date: 2013-05-12
tags: [raspberrypi]
category: blog
---

<p>
If you have children, you will recognise the "Are we nearly there"
syndrome. This happens on long car journeys, usually starting only a
few minutes after setting off and repeating at frequent intervals. If
you have three children, it's like listening to a quadraphonic
speaker setup with one of the speakers missing.
</p>

<div class="photofloatr">
<a class="fancybox-thumb" rel="fancybox-thumb"  title="Raspberry Pi DLNA Server." href="/images/mediapi/mediapi.jpg"><img
 width="200" alt="Raspberry Pi DLNA Server." title="Raspberry Pi DLNA Server." src="/images/mediapi/thumb.mediapi.jpg" /></a>

</div>


<p>
In pre-gadget days, when I was a child we used to play endless games
of "I Spy". Whilst this is still fun, it does get a bit tedious after
three of four hours. Now most children will have some sort of gadget
that lets them play games, or watch a video. On problem with videos
is that the one they insist on watching isn't on their phone/tablet
and even if they had though to put it on their phone before leaving
home, it's still quite a faff.
</p>

<p>
However, for the open source tinkerer there is a solution at
hand. How about creating a Wifi access point inside the car connected
to a box that streams video. If you already have most of the bits,
this isn't too expensive and given a big enough hard disk you can
take almost your whole video collection with you. Even better if you
arrive somewhere with no TV, you can simply take the whole setup
inside with you and carry on watching videos.
</p>

<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Using This Document.</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
This document is written using Emacs <a href="http://org-mode.org/">org-mode</a> . The source files can
be generated directly from the document using <a href="http://orgmode.org/worg/org-contrib/babel/">Babel</a> . If you don't
use Emacs, you will just have to resort to copy and paste!
</p>

<p>
You can always get the most up to date version of this tutorial from
<a href="https://github.com/geekinthesticks/raspberry-pi-dlnaserver">GitHub</a> , which also included all the source code.
</p>
</div>
</div>

<div id="outline-container-unnumbered-2" class="outline-2">
<h2 id="unnumbered-2">Overview.</h2>
<div class="outline-text-2" id="text-unnumbered-2">
<p>
The system uses a raspberry Pi with a WiFi dongle and a usb external
hard drive. The Pi is configured as a WiFi access point using a WiFi dongle, while the
ethernet interface is configured on a separate network, which can
connect to my home router. This allows
me to connect to the access point with your phone, but still just plug the Pi into
my home network using an ethernet cable.
</p>

<p>
I installed a dhcp server on the Pi to give out addresses to clients
connected to the WiFi interface. This server only listens on the WiFi
interface, so will only hand out dhcp addresses to devices connected
via WiFi and not try to compete with the dhcp server on my home
network. The ethernet interface is configured to use dhcp, so you can
plug it into any network with a dhcp server.
</p>

<p>
I have also installed hostapd which allows the Pi to act as an
access point and minidlna, which turns the Pi into a dlna server.
</p>

<p>
Since I am using both a WiFi dongle and an external USB hard drive, I
am powering the Pi via a powered hub. You should check the
specifications of your hub to make sure it can power the Pi.
</p>

<p>
To power the powered hub in the car I am using a Universal Battery
Elimination Circuit (UBEC). This converts this 12v from the car
battery and provides a 5v 3 amp output. I will also provide some
protection from voltage and current spikes. These are available for
about Â£6 on eBay.
</p>
</div>
</div>

<div id="outline-container-unnumbered-3" class="outline-2">
<h2 id="unnumbered-3">Hardware.</h2>
<div class="outline-text-2" id="text-unnumbered-3">
<ul class="org-ul">
<li>Raspberry Pi
</li>
<li>Wifi Card
</li>
<li>Powered hub capable of powering the Pi from the hub itself.
</li>
<li>External bus powered usb drive
</li>
<li>Resistors 1x10k and 1x1k
</li>
<li>Momentary switch
</li>
<li>UBEC
</li>
<li>Some sort of box to hold the Pi hard drive and hub (Tupperware)
</li>
<li>Jack plug and socket
</li>
</ul>
</div>
</div>


<div id="outline-container-unnumbered-4" class="outline-2">
<h2 id="unnumbered-4">Setting Up the Server.</h2>
<div class="outline-text-2" id="text-unnumbered-4">
<p>
I am using Raspbian, but the setup should work with most distros.
</p>
</div>

<div id="outline-container-unnumbered-5" class="outline-3">
<h3 id="unnumbered-5">Install required packages:</h3>
<div class="outline-text-3" id="text-unnumbered-5">
<div class="org-src-container">

<pre class="src src-sh">sudo apt-get install isc-dhcp-server hostapd minidnla
</pre>
</div>
</div>
</div>


<div id="outline-container-unnumbered-6" class="outline-3">
<h3 id="unnumbered-6">Connect the External usb Disk.</h3>
<div class="outline-text-3" id="text-unnumbered-6">
<p>
Check what device your hard drive is:
</p>

<div class="org-src-container">

<pre class="src src-sh">pi@mediapi ~ $ lsblk
NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda           8:0    0 232.9G  0 disk
&#9492;&#9472;sda1        8:1    0 232.9G  0 part /mnt/sda1
mmcblk0     179:0    0  14.6G  0 disk
&#9500;&#9472;mmcblk0p1 179:1    0    56M  0 part /boot
&#9492;&#9472;mmcblk0p2 179:2    0  14.6G  0 part /
</pre>
</div>

<p>
In my case it's /dev/sda1.
</p>

<p>
Make a directory and mount the drive:
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo mkdir /mnt/sda1
sudo mount /dev/sda1 /mnt
</pre>
</div>

<p>
To make the drive mount at boot modify /etc/fstab:
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo nano /etc/fstab

proc            /proc           proc    defaults          0       0
/dev/mmcblk0p1  /boot           vfat    defaults          0       2
/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Mount our usb disk.</span>
/dev/sda1  /mnt/sda1               ext4    defaults,noatime  0       1
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-7" class="outline-3">
<h3 id="unnumbered-7">Configuring the Wireless Access Point.</h3>
<div class="outline-text-3" id="text-unnumbered-7">
<p>
The WiFi access point must have a static ip address, that is in a
different subnet to your home network. My home network uses the
192.168.0.0 range of addresses, so I setup the WiFi interface to use
10.0.0.1. This means that you can just plug in the Pi to your home
network to copy files, but minidlna can serve media files
independently via the WiFi interface.
</p>

<p>
First check that your WiFi dongle can act as an Access
Point (look for AP n the output):
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo iw list

Supported interface modes:
                 * IBSS
                 * managed
                 * AP
                 * AP/VLAN
                 * WDS
                 * monitor
                 * mesh point
</pre>
</div>


<p>
Now edit /etc/network/interfaces:
</p>

<div class="org-src-container">

<pre class="src src-sh">auto lo

iface lo inet loopback
auto eth0
iface eth0 inet dhcp


auto wlan0
iface wlan0 inet static
        address 10.0.0.1
        netmask 255.255.255.0
        gateway 10.0.0.1
</pre>
</div>


<p>
Now we need to set up the dhcp server to hand out addresses to devices
connected on the WiFi interface. Edit /etc/dhcp/dhcpd.conf:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #586e75; font-style: italic;">#</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Sample configuration file for ISC dhcpd for Debian</span>
<span style="color: #586e75; font-style: italic;">#</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">$Id: dhcpd.conf,v 1.1.1.1 2002/05/21 00:07:44 peloy Exp $</span>
<span style="color: #586e75; font-style: italic;">#</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">The ddns-updates-style parameter controls whether or not the server will</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">attempt to do a DNS update when a lease is confirmed. We default to the</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">behavior of the version 2 packages ('none', since DHCP v2 didn't</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">have support for DDNS.)</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">ddns-update-style none;</span>
ddns-updates on;
ddns-update-style interim;
ddns-rev-domainname <span style="color: #2aa198;">"in-addr.arpa."</span>;
ignore client-updates;      <span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Overwrite client configured FQHNs</span>


ddns-domainname <span style="color: #2aa198;">"bantercat.co.uk"</span>;

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">option definitions common to all supported networks...</span>
option domain-name <span style="color: #2aa198;">"bantercat.co.uk"</span>;
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">option domain-name-servers firewall.banter.local;</span>
option domain-name-servers 8.8.8.8;

default-lease-time 600;
max-lease-time 7200;
one-lease-per-client on;

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">If this DHCP server is the official DHCP server for the local</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">network, the authoritative directive should be uncommented.</span>
authoritative;

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Use this to send dhcp log messages to a different log file (you also</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">have to hack syslog.conf to complete the redirection).</span>
log-facility local7;


<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">include "/etc/rndc.key";</span>



subnet 10.0.0.0 netmask 255.255.255.0 {
    pool {

             range 10.0.0.10 10.0.0.100;
             max-lease-time 1800; <span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">30 minutes</span>
             allow unknown-clients;
    }

    option routers 10.0.0.1;
<span style="color: #586e75; font-style: italic;">#    </span><span style="color: #586e75; font-style: italic;">option subnet-mask 255.255.255.0;</span>
    option broadcast-address 10.0.0.255;

}

<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">subnet 192.168.0.0 netmask 255.255.255.0 {</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">--- default gateway</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">interface eth0;</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">option routers</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">10.0.0.1;</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">--- Netmask</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">option subnet-mask</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">255.255.255.0;</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">--- Broadcast Address</span>
option broadcast-address 192.168.0.255;
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">--- Domain name servers, tells the clients which DNS servers to use.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">option domain-name-servers 10.0.0.1, 8.8.8.8, 8.8.4.4;</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">option time-offset 0;</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">range 192.168.0.100 192.168.0.200;</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">default-lease-time 1209600;</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">max-lease-time 1814400;</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">}</span>
</pre>
</div>

<p>
Next we need to configure hostapd. Edit /etc/hostapd.conf, replacing
"yourpassphrase" and "ssid" with something suitable:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #268bd2;">interface</span>=wlan0
<span style="color: #268bd2;">driver</span>=nl80211
<span style="color: #268bd2;">logger_syslog</span>=-1
<span style="color: #268bd2;">logger_syslog_level</span>=2
<span style="color: #268bd2;">logger_stdout</span>=-1
<span style="color: #268bd2;">logger_stdout_level</span>=2
<span style="color: #268bd2;">ssid</span>=mediapi
<span style="color: #268bd2;">hw_mode</span>=g
<span style="color: #268bd2;">channel</span>=6
<span style="color: #268bd2;">auth_algs</span>=3
<span style="color: #268bd2;">max_num_sta</span>=5
<span style="color: #268bd2;">wpa</span>=2
<span style="color: #268bd2;">wpa_passphrase</span>=testing123
<span style="color: #268bd2;">wpa_key_mgmt</span>=WPA-PSK
<span style="color: #268bd2;">wpa_pairwise</span>=TKIP CCMP
<span style="color: #268bd2;">rsn_pairwise</span>=CCMP
</pre>
</div>

<p>
Now reboot and log into the Pi, making sure it's still connected via
the ethernet cable. Check that the wireless interface is up and
running and configured to the correct address:
</p>

<div class="org-src-container">

<pre class="src src-sh">pi@mediapi ~ $ ifconfig wlan0
wlan0     Link encap:Ethernet  HWaddr 7c:dd:90:30:99:02
          inet addr:10.0.0.1  Bcast:10.0.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:7876 (7.6 KiB)
</pre>
</div>

<p>
Look carefully at the inet addr:10.0.0.1 to make sure its got the
correct address.
</p>

<p>
If you look in your wireless manager app on another computer, you should see a new access
point called "mediapi" (or whatever you called it in hostapd.conf). You can try connecting to it - the password
is whatever you set in hostapd.conf.
</p>
</div>
</div>

<div id="outline-container-unnumbered-8" class="outline-3">
<h3 id="unnumbered-8">Configuring the minidlna Server.</h3>
<div class="outline-text-3" id="text-unnumbered-8">
<p>
Once you have established that you can connect to the WiFi access
point, you can setup the minidlna server.
</p>

<p>
Edit /etc/minidlna.conf
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">This is the configuration file for the MiniDLNA daemon, a DLNA/UPnP-AV media</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">server.</span>
<span style="color: #586e75; font-style: italic;">#</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Unless otherwise noted, the commented out options show their default value.</span>
<span style="color: #586e75; font-style: italic;">#</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">On Debian, you can also refer to the minidlna.conf(5) man page for</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">documentation about this file.</span>


<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Path to the directory you want scanned for media files.</span>
<span style="color: #586e75; font-style: italic;">#</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">This option can be specified more than once if you want multiple directories</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">scanned.</span>
<span style="color: #586e75; font-style: italic;">#</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">If you want to restrict a media_dir to a specific content type, you can</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">prepend the directory name with a letter representing the type (A, P or V),</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">followed by a comma, as so:</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "A" for audio    (eg. media_dir=A,/var/lib/minidlna/music)</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "P" for pictures (eg. media_dir=P,/var/lib/minidlna/pictures)</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "V" for video    (eg. media_dir=V,/var/lib/minidlna/videos)</span>
<span style="color: #586e75; font-style: italic;">#</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">WARNING: After changing this option, you need to rebuild the database. Either</span>
<span style="color: #586e75; font-style: italic;">#          </span><span style="color: #586e75; font-style: italic;">run minidlna with the '-R' option, or delete the 'files.db' file</span>
<span style="color: #586e75; font-style: italic;">#          </span><span style="color: #586e75; font-style: italic;">from the db_dir directory (see below).</span>
<span style="color: #586e75; font-style: italic;">#          </span><span style="color: #586e75; font-style: italic;">On Debian, you can run, as root, 'service minidlna force-reload' instead.</span>
<span style="color: #268bd2;">media_dir</span>=V,/media/videos
<span style="color: #268bd2;">media_dir</span>=V,/mnt/sda1/video_recordings



<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Path to the directory that should hold the database and album art cache.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">db_dir=/var/lib/minidlna</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Path to the directory that should hold the log file.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">log_dir=/var/log</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Minimum level of importance of messages to be logged.</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Must be one of "off", "fatal", "error", "warn", "info" or "debug".</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">"off" turns of logging entirely, "fatal" is the highest level of importance</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">and "debug" the lowest.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">log_level=warn</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Use a different container as the root of the directory tree presented to</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">clients. The possible values are:</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "." - standard container</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "B" - "Browse Directory"</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "M" - "Music"</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "P" - "Pictures"</span>
<span style="color: #586e75; font-style: italic;">#   </span><span style="color: #586e75; font-style: italic;">* "V" - "Video"</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">if you specify "B" and client device is audio-only then "Music/Folders" will be used as root</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">root_container=.</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Network interface(s) to bind to (e.g. eth0), comma delimited.</span>
<span style="color: #268bd2;">network_interface</span>=eth0,wlan0

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">IPv4 address to listen on (e.g. 192.0.2.1).</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">listening_ip=</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Port number for HTTP traffic (descriptions, SOAP, media transfer).</span>
<span style="color: #268bd2;">port</span>=8200

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">URL presented to clients.</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">The default is the IP address of the server on port 80.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">presentation_url=http://example.com:80</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Name that the DLNA server presents to clients.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">friendly_name=</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Serial number the server reports to clients.</span>
<span style="color: #268bd2;">serial</span>=12345678

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Model name the server reports to clients.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">model_name=Windows Media Connect compatible (MiniDLNA)</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Model number the server reports to clients.</span>
<span style="color: #268bd2;">model_number</span>=1

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Automatic discovery of new files in the media_dir directory.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">inotify=yes</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">List of file names to look for when searching for album art. Names should be</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">delimited with a forward slash ("/").</span>
<span style="color: #268bd2;">album_art_names</span>=Cover.jpg/cover.jpg/AlbumArtSmall.jpg/albumartsmall.jpg/AlbumArt.jpg/albumart.jpg/Album.jpg/album.jpg/Folder.jpg/folder.jpg/Thumb.jpg/thumb.jpg

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Strictly adhere to DLNA standards.</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">This allows server-side downscaling of very large JPEG images, which may</span>
<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">decrease JPEG serving performance on (at least) Sony DLNA products.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">strict_dlna=no</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Support for streaming .jpg and .mp3 files to a TiVo supporting HMO.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">enable_tivo=no</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Notify interval, in seconds.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">notify_interval=895</span>

<span style="color: #586e75; font-style: italic;"># </span><span style="color: #586e75; font-style: italic;">Path to the MiniSSDPd socket, for MiniSSDPd support.</span>
<span style="color: #586e75; font-style: italic;">#</span><span style="color: #586e75; font-style: italic;">minissdpdsocket=/run/minissdpd.sock</span>
</pre>
</div>

<p>
The parts you need to edit are shown above. Note that media<sub>dir</sub>
should be the path to the directories usb hard disk containing your
media. In the example above, I have got one directory for video files
and one for audio files. I have also configured it to serve media on
both the ethernet and wireless interfaces.
</p>

<p>
Now you can test the dnla server. With my Android phone I use
<a href="https://play.google.com/store/apps/details?id=com.dbapp.android.mediahouse&hl=en">MediaHouse</a>  . You should be able to connect via your home network if
the server is plugged into your router via  the ethernet cable. Now
see if you can see a new Wireless Access Point called "mediapi" on
your Android phone and try connecting to it. You should then be able
to browse your media using MediaHouse.
</p>
</div>
</div>


<div id="outline-container-unnumbered-9" class="outline-3">
<h3 id="unnumbered-9">Connecting the UBEC.</h3>
<div class="outline-text-3" id="text-unnumbered-9">
<p>
Before you try to do this double check to make sure you know what you
are doing. If you fry your car electrics, or the Pi don't blame me.
</p>

<p>
I have cut the power cable between my powered usb hub between the
power brick and the hub. I have put a jack socket on one end of the
cable and a plug on the other end. Make sure you don't get the
polarities mixed up. This allows me to disconnect the wall wart and
plug the output from the UBEC into the powered hub input, which is
5v. If I want to use the unit in the house, I just unplug the UBEC
and plug the jack plug from the wall wart back in.
</p>
</div>
</div>

<div id="outline-container-unnumbered-10" class="outline-3">
<h3 id="unnumbered-10">Hardware Off Switch.</h3>
<div class="outline-text-3" id="text-unnumbered-10">
<p>
There is one final problem. How to turn off the Pi in the car,
without simply pulling the plug which may well corrupt your USB
card. There are several tutorials on the web showing how to use GPIO
to turn off your Pi. I based my circuit on <a href="http://www.3cc.org/blog/2013/01/raspberry-pi-shutdown-switch-safely-turning-off-the-pi/">this</a> article.
</p>

<p>
Holding the push button down for more than a second will shutdown the server.
</p>
</div>
</div>

<div id="outline-container-unnumbered-11" class="outline-3">
<h3 id="unnumbered-11">Web Server Off Switch.</h3>
<div class="outline-text-3" id="text-unnumbered-11">
<p>
As you are probably already using your phone/tablet, you may want to
use it to turn off the Pi. This is slightly tricky for a couple of
reasons. First most web servers are specifically designed to make it
hard to execute commands like turning off your computer. Secondly
servers like Apache consume a lot of resources to use for something as
simple as just turning off your computer.
</p>

<p>
Luckily we can use NodeJS, which is lightweight and can be run as the
pi user, so can run sudo commands without requiring a password. The
app just displays a single page with a Shutdown button, that does
what it says on the tin.
</p>

<p>
You are already connected to the Pi via WiFi, so you just need to
browse to <a href="http://localhost:8080/">http://localhost:8080/</a> . You can change the port by modifying
the NodeJS app. By default the NodeJS app may crash if it encounters
an error. However, we can use the <a href="http://blog.nodejitsu.com/keep-a-nodejs-server-up-with-forever">forever</a> app to make sure NodeJS
restarts in case of an error.
</p>

<p>
First you need to install NodeJS and its package manager npm:
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo apt-get install nodejs npm
</pre>
</div>

<p>
Once NodeJS is installed you will need to install some node
packages. Change to the directory where you installed server.js:
</p>

<div class="org-src-container">

<pre class="src src-sh">npm install node-static
</pre>
</div>

<p>
Create the server.js file in the same directory:
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #859900;">var</span> <span style="color: #268bd2;">http</span> = require(<span style="color: #2aa198;">'http'</span>);
<span style="color: #859900;">var</span> <span style="color: #268bd2;">nodestatic</span> = require(<span style="color: #2aa198;">'node-static'</span>);
<span style="color: #859900;">var</span> <span style="color: #268bd2;">sys</span> = require(<span style="color: #2aa198;">'util'</span>);
<span style="color: #859900;">var</span> <span style="color: #268bd2;">path</span> = require(<span style="color: #2aa198;">'path'</span>);
<span style="color: #859900;">var</span> <span style="color: #268bd2;">url</span> = require(<span style="color: #2aa198;">'url'</span>);
<span style="color: #859900;">var</span> <span style="color: #268bd2;">exec</span> = require(<span style="color: #2aa198;">'child_process'</span>).exec;
filesys = require(<span style="color: #2aa198;">"fs"</span>);

<span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Setup static server for current directory</span>
<span style="color: #859900;">var</span> <span style="color: #268bd2;">staticServer</span> = <span style="color: #859900;">new</span> <span style="color: #b58900;">nodestatic.Server</span>(<span style="color: #2aa198;">"."</span>);

<span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Get temperature records from database</span>




<span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Setup node http server</span>
<span style="color: #859900;">var</span> <span style="color: #268bd2;">server</span> = http.createServer(
    <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Our main server function</span>


    <span style="color: #859900;">function</span>(<span style="color: #268bd2;">request</span>, <span style="color: #268bd2;">response</span>)
    {
        <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Grab the URL requested by the client and parse any query options</span>
        <span style="color: #586e75; font-style: italic;">//</span><span style="color: #586e75; font-style: italic;">var url = require('url').parse(request.url, true);</span>
        <span style="color: #859900;">var</span> <span style="color: #268bd2;">pathfile</span> = url.pathname;
        <span style="color: #859900;">var</span> <span style="color: #268bd2;">my_path</span> = url.parse(request.url).pathname;
        <span style="color: #859900;">var</span> <span style="color: #268bd2;">full_path</span> =  path.join(process.cwd(),my_path);
        <span style="color: #859900;">var</span> <span style="color: #268bd2;">query</span> = url.query;
        <span style="color: #859900;">var</span> <span style="color: #268bd2;">shutdown</span> = <span style="color: #2aa198;">"/shutdown"</span>;

        console.log(<span style="color: #2aa198;">'my_path: '</span> + my_path);

        <span style="color: #859900;">if</span> (my_path == <span style="color: #2aa198;">'/shutdown'</span>){
            console.log(<span style="color: #2aa198;">'Shutting down server'</span>);
            response.writeHead(200);
            child = exec(<span style="color: #2aa198;">"sudo shutdown -h now"</span>, <span style="color: #859900;">function</span> (<span style="color: #268bd2;">error</span>, <span style="color: #268bd2;">stdout</span>, <span style="color: #268bd2;">stderr</span>) {
                response.end(<span style="color: #2aa198;">"Shutdown..."</span>);
            <span style="color: #859900;">return</span>;
            });
        }

      <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Serve index file.</span>
        <span style="color: #859900;">if</span> (my_path == <span style="color: #2aa198;">'/'</span>){
            console.log(<span style="color: #2aa198;">'Requesting index file'</span>);
            path.exists(full_path + <span style="color: #2aa198;">'index.html'</span>,<span style="color: #859900;">function</span>(<span style="color: #268bd2;">exists</span>){
                <span style="color: #859900;">if</span>(!exists){
                    console.log(<span style="color: #2aa198;">'Error: index.html not found'</span>);
                    response.writeHeader(404, {<span style="color: #2aa198;">"Content-Type"</span>: <span style="color: #2aa198;">"text/plain"</span>});
                    response.write(<span style="color: #2aa198;">"404 Not Found\n"</span>);
                    response.end();
                }
                <span style="color: #859900;">else</span>{

                    <span style="color: #586e75; font-style: italic;">//</span><span style="color: #586e75; font-style: italic;">response.writeHead(200, { "Content-type": "text/plain" });</span>
                    filesys.readFile(full_path + <span style="color: #2aa198;">'index.html'</span>, <span style="color: #2aa198;">"binary"</span>, <span style="color: #859900;">function</span>(<span style="color: #268bd2;">err</span>, <span style="color: #268bd2;">file</span>) {

                        <span style="color: #859900;">if</span>(err) {
                            response.writeHeader(500, {<span style="color: #2aa198;">"Content-Type"</span>: <span style="color: #2aa198;">"text/plain"</span>});
                            response.write(err + <span style="color: #2aa198;">"\n"</span>);
                            response.end();

                        }
                        <span style="color: #859900;">else</span>{
                            response.writeHeader(200);
                            response.write(file, <span style="color: #2aa198;">"binary"</span>);
                            response.end();
                                               }
                    });

                }
            });
        }







      <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Handler for favicon.ico requests</span>
        <span style="color: #859900;">if</span> (pathfile == <span style="color: #2aa198;">'/favicon.ico'</span>){
            response.writeHead(200, {<span style="color: #2aa198;">'Content-Type'</span>: <span style="color: #2aa198;">'image/x-icon'</span>});
            response.end();

            <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Optionally log favicon requests.</span>
            <span style="color: #586e75; font-style: italic;">//</span><span style="color: #586e75; font-style: italic;">console.log('favicon requested');</span>
            <span style="color: #859900;">return</span>;
        }


        <span style="color: #859900;">else</span> {
            <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Print requested file to terminal</span>
            console.log(<span style="color: #2aa198;">'Request from '</span>+ request.connection.remoteAddress +<span style="color: #2aa198;">' for: '</span> + pathfile);

            <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Serve file using node-static</span>
            staticServer.serve(request, response, <span style="color: #859900;">function</span> (<span style="color: #268bd2;">err</span>, <span style="color: #268bd2;">result</span>) {
                <span style="color: #859900;">if</span> (err){
                    <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Log the error</span>
                    sys.error(<span style="color: #2aa198;">"Error serving "</span> + request.url + <span style="color: #2aa198;">" - "</span> + err.message);

                    <span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Respond to the client</span>
                    response.writeHead(err.status, err.headers);
                    response.end(<span style="color: #2aa198;">'Error 404 - file not found'</span>);
                    <span style="color: #859900;">return</span>;
                }
                <span style="color: #859900;">return</span>;
            })
        }
    });

server.listen(8080);
<span style="color: #586e75; font-style: italic;">// </span><span style="color: #586e75; font-style: italic;">Log message</span>
console.log(<span style="color: #2aa198;">'Server running at http://localhost:8080'</span>);
</pre>
</div>

<p>
Now create index.html in the same directory as node.js. Note this
index.html is very basic, feel free to jazz it up
</p>

<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #268bd2;">html</span>&gt;
&lt;<span style="color: #268bd2;">head</span>&gt;

&lt;/<span style="color: #268bd2;">head</span>&gt;

&lt;<span style="color: #268bd2;">body</span>&gt;
&lt;<span style="color: #268bd2;">p</span>&gt;Hello world!&lt;/<span style="color: #268bd2;">p</span>&gt;
&lt;<span style="color: #268bd2;">p</span>&gt;
  &lt;<span style="color: #268bd2;">a</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"/shutdown"</span> <span style="color: #268bd2;">class</span>=<span style="color: #2aa198;">"danger"</span>&gt;Shutdown&lt;/<span style="color: #268bd2;">a</span>&gt;
  &lt;/<span style="color: #268bd2;">p</span>&gt;
&lt;/<span style="color: #268bd2;">body</span>&gt;

&lt;/<span style="color: #268bd2;">html</span>&gt;
</pre>
</div>

<p>
To run the server:
</p>

<pre class="example">
nodejs server.js
</pre>

<p>
If you are connected to your local network via ethernet you can
open the webpage at <a href="http://ip_address_of_your_pi/">http://ip_address_of_your_pi/</a> . If you are
connected via the WiFi dongle on the Pi the url is <a href="http://localhost/">http://localhost/</a> .
</p>
</div>
</div>
</div>



<div id="outline-container-unnumbered-12" class="outline-2">
<h2 id="unnumbered-12">Final Thoughts.</h2>
<div class="outline-text-2" id="text-unnumbered-12">
<p>
Streaming videos isn't the only thing I plan to do. By adding a usb
3G dongle I can also use it as a portable WiFi internet
hotspot. However, the details are for another post.
</p>
</div>
</div>
